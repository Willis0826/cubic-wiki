# Cursor Rules for Cubic Wiki - Next.js 15 + TypeScript + Prisma + Supabase Project

## Project Overview
This is a Next.js 15 application with TypeScript, Tailwind CSS, Mantine UI components, Prisma ORM, and Supabase integration. The project follows modern React patterns and best practices.

## Code Style & Conventions

### TypeScript
- Use strict TypeScript with proper type annotations
- Prefer interfaces over types for object shapes
- Use generic types where appropriate
- Always define return types for functions
- Use `const` assertions for immutable data
- Prefer `as const` over type assertions when possible
- Always use complete brackets `{}` for if statements, even for single-line blocks

### React & Next.js 15
- Use React 19 features and patterns
- Prefer Server Components by default, use Client Components only when necessary
- Use the `"use client"` directive only when required
- Follow Next.js 15 App Router conventions
- Use proper error boundaries and loading states
- Implement proper SEO with metadata

### File Organization
- Keep components in `src/app` for page-specific components
- Use `src/lib` for utilities, helpers, and shared logic
- Follow Next.js 15 file-based routing conventions
- Use descriptive file names with kebab-case
- Group related files in directories

### Component Structure
```typescript
// Server Component (default)
export default function ComponentName() {
  return <div>Content</div>
}

// Client Component (when needed)
"use client"
import { useState } from 'react'

export default function ClientComponent() {
  const [state, setState] = useState()
  return <div>Content</div>
}
```

### Database & Prisma
- Use Prisma Client for all database operations
- Write type-safe database queries
- Use proper error handling for database operations
- Follow Prisma best practices for schema design
- Use transactions when multiple operations need to be atomic

### API Routes
- Use Next.js API routes in `src/app/api`
- Implement proper error handling and status codes
- Use Zod for request/response validation
- Return consistent JSON responses
- Handle CORS appropriately

### Styling
- Use Mantine UI components as the primary component library
- Use Tailwind CSS for custom styling and layout
- Follow mobile-first responsive design
- Use CSS custom properties for theming
- Prefer Mantine components over custom implementations
- Use Tailwind's design system for custom styling when needed
- Leverage Mantine's theming system for consistent design

### State Management
- Use React hooks for local state
- Prefer server state over client state when possible
- Use proper state management patterns
- Implement optimistic updates where appropriate

### Error Handling
- Use try-catch blocks for async operations
- Implement proper error boundaries
- Provide meaningful error messages
- Log errors appropriately
- Handle edge cases gracefully

### Performance
- Use Next.js Image component for images
- Implement proper loading states
- Use React.memo for expensive components
- Optimize bundle size with dynamic imports
- Use proper caching strategies

### Security
- Validate all user inputs with Zod
- Use proper authentication and authorization
- Sanitize data before database operations
- Follow OWASP security guidelines
- Use environment variables for sensitive data

### Testing
- Write unit tests for utilities and helpers
- Test API routes with proper mocking
- Use integration tests for critical user flows
- Mock external dependencies appropriately

## Common Patterns

### API Route Pattern
```typescript
import { NextRequest, NextResponse } from 'next/server'
import { z } from 'zod'

const schema = z.object({
  // validation schema
})

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const validatedData = schema.parse(body)
    
    // business logic
    
    return NextResponse.json({ success: true })
  } catch (error) {
    return NextResponse.json(
      { error: 'Invalid request' },
      { status: 400 }
    )
  }
}
```

### Database Query Pattern
```typescript
import { prisma } from '@/lib/prisma'

export async function getData() {
  try {
    const data = await prisma.model.findMany({
      where: { /* conditions */ },
      select: { /* fields */ }
    })
    return data
  } catch (error) {
    console.error('Database error:', error)
    throw new Error('Failed to fetch data')
  }
}
```

### Component Pattern
```typescript
interface ComponentProps {
  title: string
  children: React.ReactNode
}

export default function Component({ title, children }: ComponentProps) {
  return (
    <div className="p-4 bg-white rounded-lg shadow">
      <h2 className="text-xl font-semibold mb-4">{title}</h2>
      {children}
    </div>
  )
}
```

## Dependencies to Use
- Next.js 15 for the framework
- React 19 for UI components
- TypeScript for type safety
- Mantine UI for component library
- Tailwind CSS for styling
- Prisma for database operations
- Supabase for backend services
- Zod for validation
- Octokit for GitHub API integration
- OpenAI for AI features
- Use Anchor instead Link to follow mantine common practice

## Avoid
- Any client-side code that can be server-side
- Inline styles over Tailwind classes
- Any database queries without proper error handling
- Hardcoded values that should be environment variables
- Direct DOM manipulation
- Unnecessary re-renders
- Large bundle sizes without code splitting

## Code Quality
- Write self-documenting code with clear variable names
- Add JSDoc comments for complex functions
- Keep functions small and focused
- Use meaningful commit messages
- Follow the DRY principle
- Write code that's easy to test and maintain 